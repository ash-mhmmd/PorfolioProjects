/* 

SQL Data Cleaning Project

Project inspired by AlexTheAnalyst (Youtube)
Data Source: https://github.com/AlexTheAnalyst/PortfolioProjects/blob/main/Nashville%20Housing%20Data%20for%20Data%20Cleaning.xlsx

*/

---------------------------------------------------------------------------------------------------------------------

--Standardize Date Format

Select SaleDateConverted, CONVERT(DATE, SaleDate)
From CleaningProject.dbo.NashvilleHousing;

Alter Table NashvilleHousing
Add SaleDateConverted Date;

Update NashvilleHousing
Set SaleDateConverted = CONVERT(Date,SaleDate);

---------------------------------------------------------------------------------------------------------------------

--Populate Property Address Data

--Found that ParcelID correlates to Property Address. 	
Select *
From NashvilleHousing
--Where PropertyAddress is null
Order By ParcelID;

--Creating self-join to check that ParcelID = PropertyAddress and fill NULL PropertyAddress cells
Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
From CleaningProject.dbo.NashvilleHousing a
JOIN CleaningProject.dbo.NashvilleHousing b
	ON a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null;

Update a
Set PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
From CleaningProject.dbo.NashvilleHousing a
JOIN CleaningProject.dbo.NashvilleHousing b
	ON a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
	Where a.PropertyAddress is null;

---------------------------------------------------------------------------------------------------------------------

--Breaking Down Addresses into Individual Columns (Address, City, State)

--Cleaning PropertyAddress: Splitting Address and City
Select
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) - 1) as Address,
SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1,LEN(PropertyAddress)) as City
From NashvilleHousing;

--Adding 2 new columns and adding the above values in
Alter Table NashvilleHousing
Add PropertySplitAddress nvarchar(255);

Update NashvilleHousing
Set PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) - 1);

Alter Table NashvilleHousing
Add PropertySplitCity nvarchar(255);

Update NashvilleHousing
Set PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1,LEN(PropertyAddress));

--Checking New Columns
Select *
From NashvilleHousing;


--Cleaning Owner Address: Splitting Address, City, State (Using ParseName instead of Substring)

Select
PARSENAME(REPLACE(OwnerAddress,',','.'),3),
PARSENAME(REPLACE(OwnerAddress,',','.'),2),
PARSENAME(REPLACE(OwnerAddress,',','.'),1)
From NashvilleHousing;

--Adding new columns and adding the above values in
Alter Table NashvilleHousing
Add OwnerSplitAddress nvarchar(255);

Update NashvilleHousing
Set OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress,',','.'),3);

Alter Table NashvilleHousing
Add OwnerSplitCity nvarchar(255);

Update NashvilleHousing
Set OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress,',','.'),2);

Alter Table NashvilleHousing
Add OwnerSplitState nvarchar(255);

Update NashvilleHousing
Set OwnerSplitState = PARSENAME(REPLACE(OwnerAddress,',','.'),1);

---------------------------------------------------------------------------------------------------------------------

--Change Y and N to Yes and No in "Sold as Vacant" field using Case Statements

Select Distinct(SoldAsVacant), Count(SoldAsVacant)
From NashvilleHousing
Group by SoldAsVacant
Order by 2;

Select SoldAsVacant,
	CASE When SoldAsVacant = 'Y' then 'Yes'
		When SoldAsVacant = 'N' then 'No'
		ELSE SoldAsVacant
		End
From NashvilleHousing;

Update NashvilleHousing
Set SoldAsVacant = CASE When SoldAsVacant = 'Y' then 'Yes'
		When SoldAsVacant = 'N' then 'No'
		ELSE SoldAsVacant
		End;

---------------------------------------------------------------------------------------------------------------------

--Remove Duplicates using Row Number, CTE, and Windows Function Partition By

WITH RowNumCTE AS(
Select *,
	ROW_NUMBER() OVER (
	Partition By ParcelID, PropertyAddress, SaleDate, LegalReference
	Order By UniqueID
	) row_num
From NashvilleHousing
)
Delete *
From RowNumCTE
Where row_num > 1;

---------------------------------------------------------------------------------------------------------------------

--Deleting Unused Columns

ALTER TABLE NashvilleHousing
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress;

ALTER TABLE NashvilleHousing
DROP COLUMN SaleDate;
